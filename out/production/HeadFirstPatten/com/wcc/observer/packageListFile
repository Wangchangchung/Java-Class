com.wcc.observer 包是写一个观察者模式：
案例描述：

    WeatherData对象负责追踪目前的天气状况(温度、湿度、气压)
    建立一个应用，有三种布告板，分别显示目前的状况、气象统计及简单的预报。
    当WetherObject对象获取最新的测量数据的时候，三种布告板必须实时更新。

1、interface 包
    Subjcet 主题接口(气象站):  里面定义一些对观察者操作的方法
    Observer观察者接口:  实现update方法已实现观察者接口
    DispalyElement 布告板接口: 布告板实现 display方法

2、interfaceimpl 包
    interface包对应接口的实现

3、test 包
    测试包


总结：
    观察者模式———— 在对象之间定义一对多的依赖，这样一来，当一个对象改变状态
                  依赖它的 对象都会收到通知，并自动更新。

    OO原则：
       1、封装变化
       2、多用组合，少用继承
       3、针对接口编程、不针对实现编程
       4、位交互对象之间的松耦合设计而努力

要点：
    1、观察者模式定义了对象之间一对多的关系
    2、主题(也就是可观察者)用一个共同的接口来更新观察者
    3、主题(也就是可观察者)用一个共同的接口来更新观察者
    4、使用此模式时，你可以从被观察者处(push) 或拉(pull)数据(然而。推的方式被认为更“正确”)
    5、有多个观察者时，不可以依赖特定的通知次序。
    6、Java有多个观察者模式的实现，包括了通用的java.util.Observable。
    7、要注意java.util.Observale实现上所带来的问题：
        1、Observale 是一个类，这个可不是一件好的事情，因为它是一个类
        ，你必须设计一个类继承它，如果某个类想同时具有Observable类和另外一个超类的行为。就会陷入两难，
        毕竟Java不支持多继承。这限制了Observable的复用潜力(增加复用潜力正是我们使用模式的最原始的动机)
        2、再看看Observable API, 会发现setChanged()方法被保护起来了(被定义成protected). 那么这意味着
        ：除非你继承自Observale，否则你是无法创建Observale 实例并组合到你自己的对象中来。这个设计规则违反了
        第二个设计原则：多用组合，少用继承。

    8、Swing大量使用观察者模式，许多GUI框架也是如此
    9、此模式被应用在许多地方，例如：JavaBean、RMI

