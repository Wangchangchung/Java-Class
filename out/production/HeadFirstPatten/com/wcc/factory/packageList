针对接口编程：
    针对接口编程，可以隔掉系统以后可能发生的一大堆的改变，为什么？
    如果代码是针对接口而写的，那么通过多态，它可以与任何新类实现该接口。
    但是，当代码使用大量的具体的类时，等于是自找麻烦，因为一旦加入新的具体类，就必须要更改
    代码，也就是说，你的代码并非“对修改关闭”。 记住这个设计应该是 “对扩展开放，对修改关闭”

认识工厂模式：
    1、工厂方法用来处理对象的创建，并将这个样的行为封装在子类中，
    这样客户程序中关于超类的代码和子类对象创建代码解耦了。

    2、所有的工厂模式都用来封装对象的创建，工厂方法模式通过让子类决定该
    创建是什么对象，来达到将对象创建的过程封装的目的。

    3、我们曾经看过类似的设计方式，把工厂定义为一个静态的方法，这个有什么区别呢？
        利用静态方法定一个简单的方法，这个是很常用的技巧，常被称为静态工厂，为何使用静态
        方法？因为不需要使用创建对象的方法来实例化对象，但是亲记住，这个也是优缺点的。
        不能通过继承来改变创建方法的行为。

定义工厂方法的正式定以：
    工厂方法模式：定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个
    工厂方法让类把实例化推迟到子类。

 问题：
 1、对于简单工厂和工厂方法之间的差异，他们看起来很类似，，差别在于
 在工厂方法中，返回比萨的类是子类，能解释一下吗？

 回答： 子类的确看起来很像简单工厂，简单工厂把全部的事情，在一个地方都处理完了，然而
    工厂方法却是创建一个框架，让子类决定要如何实现，比方说，在工厂方法中。
    orderPizza() 方法提供了一般的框架，以便创建披萨，orderPizza()方法依赖工厂方法
    创建具体类，并制造出实际的披萨，可通过继承PizzaStore()类，决定实际制造出来的披萨
    是什么，简单工厂的做法，可以将对象的创建封装起来，但是简单工厂不具备工厂方法的弹性。
    因为简单工厂不能变更正在创建的产品。


抽象工厂模式：

    提供一个接口，用于创建相关或依赖对象的家族。而不需要明确指定具体类。

总结：
    OO原则：
        1、多用组合，少用继承
        2、针对接口编程、不针对实现编程
        3、位交互对象之间的松耦合设计而努力
        4、类应该对扩展开发，对修改关闭
        5、依赖抽象、不要依赖具体的类


要点：
    1、所有的工厂都是用来封装对象的创建
    2、简单工厂、虽然不是真正的设计模式，但仍不失为一个简单的方法，
        可以将客户程序从具体类解耦

    3、工厂方法使用继承：把对象的创建委托给子类，子类实现工厂方法来创建对象
    4、抽象工厂使用对象组合：对象的创建实现在工厂接口所暴露出来的方法中
    5、所有工厂模式都通过减少应用程序和具体类之间的依赖促进松耦合。
    6、工厂方法允许类将实例化延迟到子类进行
    7、抽象工厂创建相关的对象家族，而不需要依赖他们的具体类
    8、依赖倒置原则，指导我们避免依赖具体类型，而要尽量避免依赖抽象
    9、工厂是很有威力的技巧，帮助我们针对抽象编程，而不要针对具体类编程。





